Okay, got a complete port of Dinky done, and ... it's considerably larger.

Like, 50% larger.

I have admittedly added some features to the design, so, let me parameterize
those so I can evaluate with and without them.

# Alignment checks

Present in Dinky5, but, easy enough to make conditional.

With: 925 LC / 47.88 MHz
Without: 912 LC / 44.75 MHz

# Wait states / bus ready lines

DinkyBus doesn't allow wait states. The icestick demo doesn't make much use of
them.

Removed: 907 LC / 44.29 MHz

# PC implemented width

Dinky5 demo on Icestick used an 8-bit PC. PC width doesn't automatically shrink
to fit memory bus implementation width, because PC is program visible in
situations like JAL.

Parameterizing it down to 8 bits: 830 LC / 47.54 MHz

Turning alignment checks back on: 846 LC

# Halting debug

While halting debug isn't wired up in the icestick demo, maybe I should disable
it conclusively. This is a matter of

1. Converting all checks of the `halt_request` pin into constant 0s
2. Removing the entire HALT case from the switch.

838 LC / 43.78 MHz. So, some halt logic _was_ getting built in. But not very
much.

# Fixing PC on fetch

Turns out, any overlapped fetch was using the wrong PC value, failing to lop off
its bottom two bits. Bet this was producing some extra muxes!

836 LC - so, uh, yeah, technically, but not a lot.


# Asserting `mem_in.ready` on loads

whoops

No impact on the icestick demo since the memory there ignores it.


# Instruction mix

Motherfucker.

The synthesis tools are being clever about the contents of RAM. Changing the
instruction mix affects synthesized size.

Using Dinky5's test program (under the assumption that this shit was happening
before) I get 764 LCs.

By filling RAM with random bits, we're up to 955 LCs with the parameterization
above.

Without it: 1217

Well, that makes all of these results really hard to compare then.


# Retesting with random data in memory

- Disabling alignment checks: -22 LUTs
- Disabling ready lines from memory: -6 LUTs (note: memory wasn't relying on
  them)
- Shrinking PC: -252 LUTs
- Disabling halting debug: -7 LUTs (note: interface was not connected)

Moving PC displacement immediate selection into decode step and sharing the PC
adder across various control flow instructions: made shit bigger. But also
faster.

---

Ah, shit, the icestick eval demo wasn't wiring up writes to lanes 2 and 3 of
RAM. That likely explains some things. Doing so costs about 52 LUTs. :(

However, that also seems to stop the synthesis tools from being excessively
smart about RAM contents -- I now get the same results for a small program as I
do for random bits. Still gonna eval with random bits tho.


Noticed that the shift amount always comes from `comp_rhs`. Tried using the
bottom 5 bits of `comp_rhs` as the shift amount during shifting, decrementing
it. This makes things bigger. If I need a decrementer anyway, registering the
output is very cheap.


---

Okay, so. With some incremental improvements, I've got the CPU in the following
configuration:

- 256-word memory (so 1024 byte, or 2 BRAMs).
- PC width constrained to 10 (i.e. all of the 256-word memory space)
- alignment checks, illegal instruction checks, and bus wait states ENABLED.
- Full 32-register set.

... fitting into 965 LCs, or 75% of an hx1k. (Turning off alignment checks: 934
LCs.) Timing suggests a maximum clock rate of 46 MHz.

Mostly I've been pulling logic that was conditional on state values / opcode
_up,_ into the top level, so that its LUTs lose their conditional inputs. This
has helped with both size and speed, though the speed's been tremendously
variable.

I think this is probably a more honest representation of the size of the core,
whereas I think Dinky may have "optimized" itself.

PicoRV32 doesn't post iCE40 synthesis results, but people are quoting ~1500 LUTs
and saying it won't fit on an hx1k on Reddit. So, my core may be smaller, though
of course picoRV32 implements some features I haven't, like interrupts.

---

Turns out some of the halt logic was being synthesized.

- Applying a basic fix to that gets us down to 958 LCs (-7)
- Disabling halting debug on icestick (it's not wired up!) gets us to... 968?
  +10? Really?

---

Random thoughts on how to be smaller

- Could probably get away with a 16-bit datapath.
- 
