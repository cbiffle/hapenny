Alright, sprinting last night and this morning I have a revised state model
working. This explicitly reuses logic between low and high halfwords where
feasible, separating state into a (state, hi-halfword) pair. Otherwise it
applies no aggressive optimization -- no one-hot state, no explicitly parallel
logic.

Currently: 786 LCs (61%)
47 MHz

CP: regfile -> adder RHS -> adder -> accumulator?

Current instruction timings:

```
LUI     6
AUIPC   6
JAL     6
JAL     6
JALR    7
Bxx     9 if taken
        7 if not
Lxx     9
SW      8
SB/SH   7

ALU     7

shift   9 + amount
```

So if we call 7 the average, we get 6.714 MIPS.

In many cases I can probably knock a cycle off instructions, because I'm not
currently doing overlapped fetch. But, that's not my current priority. My
current priority is size.

Currently SLT/SLTU are not implemented, need to fix that. They're a little
tricky because the LSB of the result depends on the MSBs of the input. Might
need an auxiliary state for them. But, those being missing will be throwing off
both my timing and area reports.

---

Okay. Got SLT/SLTU implemented, they wanted another state, works now.

We're bigger: 831 LCs. (this is all still with `addr_width = 8`.)

---

Down to 825 with some simplifications in SLT.
